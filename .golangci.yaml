# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 3m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  # build-tags:
  #   - mytag

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  # skip-dirs:
  #   - src/external_libs
  #   - autogenerated_by_my_lib

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  # skip-files:
  #   - ".*\\.my\\.go$"
  #   - lib/bad.go

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  # modules-download-mode: readonly|release|vendor


# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: true

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
linters-settings:
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    local-prefixes: github.com/amelkikh/otus_microservice_arch
  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 15
  lll:
    # max line length, lines longer will be reported. Default is 120.
    # '\t' is counted as 1 character by default, and can be changed with the tab-width option
    line-length: 120
    # tab width in spaces. Default to 1.
    tab-width: 2

linters:
  disable-all: true
  enable:
    - asciicheck           # Simple linter to check that your code does not contain non-ASCII identifiers
    - bodyclose            # Checks whether HTTP response body is closed successfully
    - deadcode             # Finds unused code
    - depguard             # Go linter that checks if package imports are in a list of acceptable packages
    - dogsled              # Checks assignments with too many blank identifiers
    - dupl                 # Tool for code clone detection
    - errorlint            # Used to find code that will cause problems with the error wrapping scheme
    - exhaustive           # Check exhaustiveness of enum switch statements in Go source code
    - exportloopref        # An analyzer that finds exporting pointers for loop variables
    - funlen               # Tool for detection of long functions
    - gci                  # Gci control golang package import order and make it always deterministic.
    - goconst              # Finds repeated strings that could be replaced by a constant
    - gocognit             # Computes and checks the cognitive complexity of functions
    - gocritic             # The most opinionated Go source code linter
    - gocyclo              # Computes and checks the cyclomatic complexity of functions
    - godot                # checks if all top-level comments contain a period at the end of the last sentence if needed
    - gofmt                # Gofmt checks whether code was gofmt-ed. By default this tool runs with -s option to check for code simplification
    - gofumpt              # Enforce a stricter format than gofmt
    - goheader             # Checks is file header matches to pattern
    - goimports            # Goimports does everything that gofmt does. Additionally it checks unused imports
    - goprintffuncname     # Checks that printf-like functions are named with `f` at the end
    - gosec                # Inspects source code for security problems
    - gosimple             # Linter for Go source code that specializes in simplifying a code
    - govet                # Vet examines Go source code and reports suspicious constructs, such as Printf calls whose arguments do not align with the format string
    - interfacer           # Linter that suggests narrower interface types
    - ifshort              # Checks that your code uses short syntax for if-statements whenever possible
    - importas             #
    - ineffassign          # Detects when assignments to existing variables are not used
    - lll                  # Reports long lines
    - makezero             # Finds slice declarations with non-zero initial length
    - misspell             # Finds commonly misspelled English words in comments
    - nakedret             # Finds naked returns in functions greater than a specified function length
    - nestif               # Reports deeply nested if statements
    - nilerr               # Finds the code that returns nil even if it checks that the error is not nil
    - noctx                # Finds sending http request without context.Context
    - nolintlint           # Reports ill-formed or insufficient nolint directives
    - prealloc             # Finds slice declarations that could potentially be preallocated
    - predeclared          # Find code that overrides one of Go's predeclared identifiers
    - revive               # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint
    - rowserrcheck         # checks whether Err of rows is checked successfully
    - sqlclosecheck        # Checks that sql.Rows and sql.Stmt are closed
    - staticcheck          # go vet on steroids, applying a ton of static analysis checks
    - structcheck          # Finds unused struct fields
    - stylecheck           # Stylecheck is a replacement for golint
    - tagliatelle          #
    - thelper              # Detects golang test helpers without t.Helper() call and checks the consistency of test helpers
    - typecheck            # Like the front-end of a Go compiler, parses and type-checks Go code
    - unconvert            # Remove unnecessary type conversions
    - unparam              # Reports unused function parameters
    - unused               # Checks Go code for unused constants, variables, functions and types
    - varcheck             # Finds unused global variables and constants
    - wastedassign         # finds wasted assignment statements
    - whitespace           # Tool for detection of leading and trailing whitespace
